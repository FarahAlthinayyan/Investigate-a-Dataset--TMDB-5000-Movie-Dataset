{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Project: The Movie Database (TMDb)\n",
    "\n",
    "## Table of Contents\n",
    "<ul>\n",
    "<li><a href=\"#intro\">Introduction</a></li>\n",
    "<li><a href=\"#wrangling\">Data Wrangling</a></li>\n",
    "<li><a href=\"#eda\">Exploratory Data Analysis</a></li>\n",
    "<li><a href=\"#conclusions\">Conclusions</a></li>\n",
    "</ul>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='intro'></a>\n",
    "## Introduction\n",
    "\n",
    "> In this dataset, we will be analyzing the Movie database that includes important information such as ratings and reveues. The chosen dataset is created after certain alterations to The Movie Database (TMDb) in combination with the DMCA. This dataset was generated from The Movie Database API. This product uses the TMDb API but is not endorsed or certified by TMDb. The columns are the following after the alterations: \n",
    "New columns:\n",
    "homepage, id, original_title, overview, popularity, production_companies, production_countries, release_date, spoken_languages, status, tagline, vote_average\n",
    "Lost columns:\n",
    "actor1facebook_likes, actor2facebook_likes, actor3facebook_likes, aspect_ratio, casttotalfacebook_likes, color, content_rating, directorfacebooklikes, facenumberinposter, moviefacebooklikes, movieimdblink, numcriticfor_reviews, numuserfor_reviews\n",
    "\n",
    "\n",
    ">To understand the dataset better, the questions that to be posed are as follows:\n",
    "\n",
    "> Which genres are most popular from year to year?\n",
    "> What kinds of properties are associated with movies\n",
    "> In the last ten years, what is the genre that has a high popularity?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import libraries that we plan to use.\n",
    "import pandas as pd \n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='wrangling'></a>\n",
    "## Data Wrangling\n",
    "\n",
    "### General Properties\n",
    "\n",
    ">Since the names of the columns seemed descriptive enough, no changes will be made. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['id', 'imdb_id', 'popularity', 'budget', 'revenue', 'original_title',\n",
       "       'cast', 'homepage', 'director', 'tagline', 'keywords', 'overview',\n",
       "       'runtime', 'genres', 'production_companies', 'release_date',\n",
       "       'vote_count', 'vote_average', 'release_year', 'budget_adj',\n",
       "       'revenue_adj'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load your data and print out a few lines. Perform operations to inspect data\n",
    "df = pd.read_csv('tmdb-movies.csv')\n",
    "\n",
    "# to see the columns clearly\n",
    "df.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Understanding the Dataset\n",
    ">The dataset contains twenty-one columns or features. Not all of these features are needed in this analysis. The following statements will help us understand our data thoroughly. In addition, it will help us identify the needed columns. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>imdb_id</th>\n",
       "      <th>popularity</th>\n",
       "      <th>budget</th>\n",
       "      <th>revenue</th>\n",
       "      <th>original_title</th>\n",
       "      <th>cast</th>\n",
       "      <th>homepage</th>\n",
       "      <th>director</th>\n",
       "      <th>tagline</th>\n",
       "      <th>...</th>\n",
       "      <th>overview</th>\n",
       "      <th>runtime</th>\n",
       "      <th>genres</th>\n",
       "      <th>production_companies</th>\n",
       "      <th>release_date</th>\n",
       "      <th>vote_count</th>\n",
       "      <th>vote_average</th>\n",
       "      <th>release_year</th>\n",
       "      <th>budget_adj</th>\n",
       "      <th>revenue_adj</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>135397</td>\n",
       "      <td>tt0369610</td>\n",
       "      <td>32.985763</td>\n",
       "      <td>150000000</td>\n",
       "      <td>1513528810</td>\n",
       "      <td>Jurassic World</td>\n",
       "      <td>Chris Pratt|Bryce Dallas Howard|Irrfan Khan|Vi...</td>\n",
       "      <td>http://www.jurassicworld.com/</td>\n",
       "      <td>Colin Trevorrow</td>\n",
       "      <td>The park is open.</td>\n",
       "      <td>...</td>\n",
       "      <td>Twenty-two years after the events of Jurassic ...</td>\n",
       "      <td>124</td>\n",
       "      <td>Action|Adventure|Science Fiction|Thriller</td>\n",
       "      <td>Universal Studios|Amblin Entertainment|Legenda...</td>\n",
       "      <td>6/9/15</td>\n",
       "      <td>5562</td>\n",
       "      <td>6.5</td>\n",
       "      <td>2015</td>\n",
       "      <td>1.379999e+08</td>\n",
       "      <td>1.392446e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>76341</td>\n",
       "      <td>tt1392190</td>\n",
       "      <td>28.419936</td>\n",
       "      <td>150000000</td>\n",
       "      <td>378436354</td>\n",
       "      <td>Mad Max: Fury Road</td>\n",
       "      <td>Tom Hardy|Charlize Theron|Hugh Keays-Byrne|Nic...</td>\n",
       "      <td>http://www.madmaxmovie.com/</td>\n",
       "      <td>George Miller</td>\n",
       "      <td>What a Lovely Day.</td>\n",
       "      <td>...</td>\n",
       "      <td>An apocalyptic story set in the furthest reach...</td>\n",
       "      <td>120</td>\n",
       "      <td>Action|Adventure|Science Fiction|Thriller</td>\n",
       "      <td>Village Roadshow Pictures|Kennedy Miller Produ...</td>\n",
       "      <td>5/13/15</td>\n",
       "      <td>6185</td>\n",
       "      <td>7.1</td>\n",
       "      <td>2015</td>\n",
       "      <td>1.379999e+08</td>\n",
       "      <td>3.481613e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>262500</td>\n",
       "      <td>tt2908446</td>\n",
       "      <td>13.112507</td>\n",
       "      <td>110000000</td>\n",
       "      <td>295238201</td>\n",
       "      <td>Insurgent</td>\n",
       "      <td>Shailene Woodley|Theo James|Kate Winslet|Ansel...</td>\n",
       "      <td>http://www.thedivergentseries.movie/#insurgent</td>\n",
       "      <td>Robert Schwentke</td>\n",
       "      <td>One Choice Can Destroy You</td>\n",
       "      <td>...</td>\n",
       "      <td>Beatrice Prior must confront her inner demons ...</td>\n",
       "      <td>119</td>\n",
       "      <td>Adventure|Science Fiction|Thriller</td>\n",
       "      <td>Summit Entertainment|Mandeville Films|Red Wago...</td>\n",
       "      <td>3/18/15</td>\n",
       "      <td>2480</td>\n",
       "      <td>6.3</td>\n",
       "      <td>2015</td>\n",
       "      <td>1.012000e+08</td>\n",
       "      <td>2.716190e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>140607</td>\n",
       "      <td>tt2488496</td>\n",
       "      <td>11.173104</td>\n",
       "      <td>200000000</td>\n",
       "      <td>2068178225</td>\n",
       "      <td>Star Wars: The Force Awakens</td>\n",
       "      <td>Harrison Ford|Mark Hamill|Carrie Fisher|Adam D...</td>\n",
       "      <td>http://www.starwars.com/films/star-wars-episod...</td>\n",
       "      <td>J.J. Abrams</td>\n",
       "      <td>Every generation has a story.</td>\n",
       "      <td>...</td>\n",
       "      <td>Thirty years after defeating the Galactic Empi...</td>\n",
       "      <td>136</td>\n",
       "      <td>Action|Adventure|Science Fiction|Fantasy</td>\n",
       "      <td>Lucasfilm|Truenorth Productions|Bad Robot</td>\n",
       "      <td>12/15/15</td>\n",
       "      <td>5292</td>\n",
       "      <td>7.5</td>\n",
       "      <td>2015</td>\n",
       "      <td>1.839999e+08</td>\n",
       "      <td>1.902723e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>168259</td>\n",
       "      <td>tt2820852</td>\n",
       "      <td>9.335014</td>\n",
       "      <td>190000000</td>\n",
       "      <td>1506249360</td>\n",
       "      <td>Furious 7</td>\n",
       "      <td>Vin Diesel|Paul Walker|Jason Statham|Michelle ...</td>\n",
       "      <td>http://www.furious7.com/</td>\n",
       "      <td>James Wan</td>\n",
       "      <td>Vengeance Hits Home</td>\n",
       "      <td>...</td>\n",
       "      <td>Deckard Shaw seeks revenge against Dominic Tor...</td>\n",
       "      <td>137</td>\n",
       "      <td>Action|Crime|Thriller</td>\n",
       "      <td>Universal Pictures|Original Film|Media Rights ...</td>\n",
       "      <td>4/1/15</td>\n",
       "      <td>2947</td>\n",
       "      <td>7.3</td>\n",
       "      <td>2015</td>\n",
       "      <td>1.747999e+08</td>\n",
       "      <td>1.385749e+09</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       id    imdb_id  popularity     budget     revenue  \\\n",
       "0  135397  tt0369610   32.985763  150000000  1513528810   \n",
       "1   76341  tt1392190   28.419936  150000000   378436354   \n",
       "2  262500  tt2908446   13.112507  110000000   295238201   \n",
       "3  140607  tt2488496   11.173104  200000000  2068178225   \n",
       "4  168259  tt2820852    9.335014  190000000  1506249360   \n",
       "\n",
       "                 original_title  \\\n",
       "0                Jurassic World   \n",
       "1            Mad Max: Fury Road   \n",
       "2                     Insurgent   \n",
       "3  Star Wars: The Force Awakens   \n",
       "4                     Furious 7   \n",
       "\n",
       "                                                cast  \\\n",
       "0  Chris Pratt|Bryce Dallas Howard|Irrfan Khan|Vi...   \n",
       "1  Tom Hardy|Charlize Theron|Hugh Keays-Byrne|Nic...   \n",
       "2  Shailene Woodley|Theo James|Kate Winslet|Ansel...   \n",
       "3  Harrison Ford|Mark Hamill|Carrie Fisher|Adam D...   \n",
       "4  Vin Diesel|Paul Walker|Jason Statham|Michelle ...   \n",
       "\n",
       "                                            homepage          director  \\\n",
       "0                      http://www.jurassicworld.com/   Colin Trevorrow   \n",
       "1                        http://www.madmaxmovie.com/     George Miller   \n",
       "2     http://www.thedivergentseries.movie/#insurgent  Robert Schwentke   \n",
       "3  http://www.starwars.com/films/star-wars-episod...       J.J. Abrams   \n",
       "4                           http://www.furious7.com/         James Wan   \n",
       "\n",
       "                         tagline      ...       \\\n",
       "0              The park is open.      ...        \n",
       "1             What a Lovely Day.      ...        \n",
       "2     One Choice Can Destroy You      ...        \n",
       "3  Every generation has a story.      ...        \n",
       "4            Vengeance Hits Home      ...        \n",
       "\n",
       "                                            overview runtime  \\\n",
       "0  Twenty-two years after the events of Jurassic ...     124   \n",
       "1  An apocalyptic story set in the furthest reach...     120   \n",
       "2  Beatrice Prior must confront her inner demons ...     119   \n",
       "3  Thirty years after defeating the Galactic Empi...     136   \n",
       "4  Deckard Shaw seeks revenge against Dominic Tor...     137   \n",
       "\n",
       "                                      genres  \\\n",
       "0  Action|Adventure|Science Fiction|Thriller   \n",
       "1  Action|Adventure|Science Fiction|Thriller   \n",
       "2         Adventure|Science Fiction|Thriller   \n",
       "3   Action|Adventure|Science Fiction|Fantasy   \n",
       "4                      Action|Crime|Thriller   \n",
       "\n",
       "                                production_companies release_date vote_count  \\\n",
       "0  Universal Studios|Amblin Entertainment|Legenda...       6/9/15       5562   \n",
       "1  Village Roadshow Pictures|Kennedy Miller Produ...      5/13/15       6185   \n",
       "2  Summit Entertainment|Mandeville Films|Red Wago...      3/18/15       2480   \n",
       "3          Lucasfilm|Truenorth Productions|Bad Robot     12/15/15       5292   \n",
       "4  Universal Pictures|Original Film|Media Rights ...       4/1/15       2947   \n",
       "\n",
       "   vote_average  release_year    budget_adj   revenue_adj  \n",
       "0           6.5          2015  1.379999e+08  1.392446e+09  \n",
       "1           7.1          2015  1.379999e+08  3.481613e+08  \n",
       "2           6.3          2015  1.012000e+08  2.716190e+08  \n",
       "3           7.5          2015  1.839999e+08  1.902723e+09  \n",
       "4           7.3          2015  1.747999e+08  1.385749e+09  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# to understand the dataset better\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> this statistical summary of the dataset shows that there are some outliers especially in the revenue. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>popularity</th>\n",
       "      <th>budget</th>\n",
       "      <th>revenue</th>\n",
       "      <th>runtime</th>\n",
       "      <th>vote_count</th>\n",
       "      <th>vote_average</th>\n",
       "      <th>release_year</th>\n",
       "      <th>budget_adj</th>\n",
       "      <th>revenue_adj</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>10866.000000</td>\n",
       "      <td>10866.000000</td>\n",
       "      <td>1.086600e+04</td>\n",
       "      <td>1.086600e+04</td>\n",
       "      <td>10866.000000</td>\n",
       "      <td>10866.000000</td>\n",
       "      <td>10866.000000</td>\n",
       "      <td>10866.000000</td>\n",
       "      <td>1.086600e+04</td>\n",
       "      <td>1.086600e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>66064.177434</td>\n",
       "      <td>0.646441</td>\n",
       "      <td>1.462570e+07</td>\n",
       "      <td>3.982332e+07</td>\n",
       "      <td>102.070863</td>\n",
       "      <td>217.389748</td>\n",
       "      <td>5.974922</td>\n",
       "      <td>2001.322658</td>\n",
       "      <td>1.755104e+07</td>\n",
       "      <td>5.136436e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>92130.136561</td>\n",
       "      <td>1.000185</td>\n",
       "      <td>3.091321e+07</td>\n",
       "      <td>1.170035e+08</td>\n",
       "      <td>31.381405</td>\n",
       "      <td>575.619058</td>\n",
       "      <td>0.935142</td>\n",
       "      <td>12.812941</td>\n",
       "      <td>3.430616e+07</td>\n",
       "      <td>1.446325e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.000065</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>1960.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>10596.250000</td>\n",
       "      <td>0.207583</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>17.000000</td>\n",
       "      <td>5.400000</td>\n",
       "      <td>1995.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>20669.000000</td>\n",
       "      <td>0.383856</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>99.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>2006.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>75610.000000</td>\n",
       "      <td>0.713817</td>\n",
       "      <td>1.500000e+07</td>\n",
       "      <td>2.400000e+07</td>\n",
       "      <td>111.000000</td>\n",
       "      <td>145.750000</td>\n",
       "      <td>6.600000</td>\n",
       "      <td>2011.000000</td>\n",
       "      <td>2.085325e+07</td>\n",
       "      <td>3.369710e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>417859.000000</td>\n",
       "      <td>32.985763</td>\n",
       "      <td>4.250000e+08</td>\n",
       "      <td>2.781506e+09</td>\n",
       "      <td>900.000000</td>\n",
       "      <td>9767.000000</td>\n",
       "      <td>9.200000</td>\n",
       "      <td>2015.000000</td>\n",
       "      <td>4.250000e+08</td>\n",
       "      <td>2.827124e+09</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  id    popularity        budget       revenue       runtime  \\\n",
       "count   10866.000000  10866.000000  1.086600e+04  1.086600e+04  10866.000000   \n",
       "mean    66064.177434      0.646441  1.462570e+07  3.982332e+07    102.070863   \n",
       "std     92130.136561      1.000185  3.091321e+07  1.170035e+08     31.381405   \n",
       "min         5.000000      0.000065  0.000000e+00  0.000000e+00      0.000000   \n",
       "25%     10596.250000      0.207583  0.000000e+00  0.000000e+00     90.000000   \n",
       "50%     20669.000000      0.383856  0.000000e+00  0.000000e+00     99.000000   \n",
       "75%     75610.000000      0.713817  1.500000e+07  2.400000e+07    111.000000   \n",
       "max    417859.000000     32.985763  4.250000e+08  2.781506e+09    900.000000   \n",
       "\n",
       "         vote_count  vote_average  release_year    budget_adj   revenue_adj  \n",
       "count  10866.000000  10866.000000  10866.000000  1.086600e+04  1.086600e+04  \n",
       "mean     217.389748      5.974922   2001.322658  1.755104e+07  5.136436e+07  \n",
       "std      575.619058      0.935142     12.812941  3.430616e+07  1.446325e+08  \n",
       "min       10.000000      1.500000   1960.000000  0.000000e+00  0.000000e+00  \n",
       "25%       17.000000      5.400000   1995.000000  0.000000e+00  0.000000e+00  \n",
       "50%       38.000000      6.000000   2006.000000  0.000000e+00  0.000000e+00  \n",
       "75%      145.750000      6.600000   2011.000000  2.085325e+07  3.369710e+07  \n",
       "max     9767.000000      9.200000   2015.000000  4.250000e+08  2.827124e+09  "
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# though this function, we can see the numerical features and identify outliers\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> There are 21 features and 10866 examples in the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10866, 21)"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> This statement will give us a better understanding of the dataset. We can also knwo if we have missing data, and the column's type. This statement will also help us know whether any of the features need a different data type.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 10866 entries, 0 to 10865\n",
      "Data columns (total 21 columns):\n",
      "id                      10866 non-null int64\n",
      "imdb_id                 10856 non-null object\n",
      "popularity              10866 non-null float64\n",
      "budget                  10866 non-null int64\n",
      "revenue                 10866 non-null int64\n",
      "original_title          10866 non-null object\n",
      "cast                    10790 non-null object\n",
      "homepage                2936 non-null object\n",
      "director                10822 non-null object\n",
      "tagline                 8042 non-null object\n",
      "keywords                9373 non-null object\n",
      "overview                10862 non-null object\n",
      "runtime                 10866 non-null int64\n",
      "genres                  10843 non-null object\n",
      "production_companies    9836 non-null object\n",
      "release_date            10866 non-null object\n",
      "vote_count              10866 non-null int64\n",
      "vote_average            10866 non-null float64\n",
      "release_year            10866 non-null int64\n",
      "budget_adj              10866 non-null float64\n",
      "revenue_adj             10866 non-null float64\n",
      "dtypes: float64(4), int64(6), object(11)\n",
      "memory usage: 1.7+ MB\n"
     ]
    }
   ],
   "source": [
    "# to understand which of the considered features have null features\n",
    "df.info()\n",
    "\n",
    "####types and look for instances of missing or possibly errant data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> Columns like Id and imdb_id appear to be unnecessary because they're unique to every example in the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                      10865\n",
       "imdb_id                 10855\n",
       "popularity              10814\n",
       "budget                    557\n",
       "revenue                  4702\n",
       "original_title          10571\n",
       "cast                    10719\n",
       "homepage                 2896\n",
       "director                 5067\n",
       "tagline                  7997\n",
       "keywords                 8804\n",
       "overview                10847\n",
       "runtime                   247\n",
       "genres                   2039\n",
       "production_companies     7445\n",
       "release_date             5909\n",
       "vote_count               1289\n",
       "vote_average               72\n",
       "release_year               56\n",
       "budget_adj               2614\n",
       "revenue_adj              4840\n",
       "dtype: int64"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# find unique values for each feature to get a better understanding of th data\n",
    "df.nunique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Cleaning (Replace this with more specific notes!)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> This dataset doesn't need a lot of cleaning; it just needs to have some columns dropped. In addition, some examples should be dropped because they're null. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>popularity</th>\n",
       "      <th>budget</th>\n",
       "      <th>revenue</th>\n",
       "      <th>vote_count</th>\n",
       "      <th>vote_average</th>\n",
       "      <th>release_year</th>\n",
       "      <th>budget_adj</th>\n",
       "      <th>revenue_adj</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>10866.000000</td>\n",
       "      <td>1.086600e+04</td>\n",
       "      <td>1.086600e+04</td>\n",
       "      <td>10866.000000</td>\n",
       "      <td>10866.000000</td>\n",
       "      <td>10866.000000</td>\n",
       "      <td>1.086600e+04</td>\n",
       "      <td>1.086600e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.646441</td>\n",
       "      <td>1.462570e+07</td>\n",
       "      <td>3.982332e+07</td>\n",
       "      <td>217.389748</td>\n",
       "      <td>5.974922</td>\n",
       "      <td>2001.322658</td>\n",
       "      <td>1.755104e+07</td>\n",
       "      <td>5.136436e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.000185</td>\n",
       "      <td>3.091321e+07</td>\n",
       "      <td>1.170035e+08</td>\n",
       "      <td>575.619058</td>\n",
       "      <td>0.935142</td>\n",
       "      <td>12.812941</td>\n",
       "      <td>3.430616e+07</td>\n",
       "      <td>1.446325e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000065</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>1960.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.207583</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>17.000000</td>\n",
       "      <td>5.400000</td>\n",
       "      <td>1995.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.383856</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>2006.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.713817</td>\n",
       "      <td>1.500000e+07</td>\n",
       "      <td>2.400000e+07</td>\n",
       "      <td>145.750000</td>\n",
       "      <td>6.600000</td>\n",
       "      <td>2011.000000</td>\n",
       "      <td>2.085325e+07</td>\n",
       "      <td>3.369710e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>32.985763</td>\n",
       "      <td>4.250000e+08</td>\n",
       "      <td>2.781506e+09</td>\n",
       "      <td>9767.000000</td>\n",
       "      <td>9.200000</td>\n",
       "      <td>2015.000000</td>\n",
       "      <td>4.250000e+08</td>\n",
       "      <td>2.827124e+09</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         popularity        budget       revenue    vote_count  vote_average  \\\n",
       "count  10866.000000  1.086600e+04  1.086600e+04  10866.000000  10866.000000   \n",
       "mean       0.646441  1.462570e+07  3.982332e+07    217.389748      5.974922   \n",
       "std        1.000185  3.091321e+07  1.170035e+08    575.619058      0.935142   \n",
       "min        0.000065  0.000000e+00  0.000000e+00     10.000000      1.500000   \n",
       "25%        0.207583  0.000000e+00  0.000000e+00     17.000000      5.400000   \n",
       "50%        0.383856  0.000000e+00  0.000000e+00     38.000000      6.000000   \n",
       "75%        0.713817  1.500000e+07  2.400000e+07    145.750000      6.600000   \n",
       "max       32.985763  4.250000e+08  2.781506e+09   9767.000000      9.200000   \n",
       "\n",
       "       release_year    budget_adj   revenue_adj  \n",
       "count  10866.000000  1.086600e+04  1.086600e+04  \n",
       "mean    2001.322658  1.755104e+07  5.136436e+07  \n",
       "std       12.812941  3.430616e+07  1.446325e+08  \n",
       "min     1960.000000  0.000000e+00  0.000000e+00  \n",
       "25%     1995.000000  0.000000e+00  0.000000e+00  \n",
       "50%     2006.000000  0.000000e+00  0.000000e+00  \n",
       "75%     2011.000000  2.085325e+07  3.369710e+07  \n",
       "max     2015.000000  4.250000e+08  2.827124e+09  "
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# After discussing the structure of the data and any problems that need to be\n",
    "#   cleaned, perform those cleaning steps in the second part of this section.\n",
    "\n",
    "df.drop(['id','imdb_id','original_title','cast','homepage','director','tagline','keywords','overview','runtime','release_date'], axis = 1, inplace = True)\n",
    "df.head()\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> In the previous statements, the features id, imdb_id, original_title, and cast because these are usually specific to the example. The rest of the features which are homepage, tagline, keywords, overview, director, runtime, and release_date are not needed because they are not going to be used, so removing them will be the right choice to avoid extra, none needed extra processing. \n",
    ">The final two columns ending with “_adj” show the budget and revenue of the associated movie in terms of 2010 dollars, accounting for inflation over time. These columns will be kept. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 10866 entries, 0 to 10865\n",
      "Data columns (total 10 columns):\n",
      "popularity              10866 non-null float64\n",
      "budget                  10866 non-null int64\n",
      "revenue                 10866 non-null int64\n",
      "genres                  10843 non-null object\n",
      "production_companies    9836 non-null object\n",
      "vote_count              10866 non-null int64\n",
      "vote_average            10866 non-null float64\n",
      "release_year            10866 non-null int64\n",
      "budget_adj              10866 non-null float64\n",
      "revenue_adj             10866 non-null float64\n",
      "dtypes: float64(4), int64(4), object(2)\n",
      "memory usage: 849.0+ KB\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f6e0d373828>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.info()\n",
    "\n",
    "df.hist(figsize = (10,9));"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> Since there are soem missing values in 'genres' and 'production_companies', Let us see what these examples have in common. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> This is a histogram of the entire dataset. It shows that budget, budget_adj, revenue, revenue_adj, vote_count, and popularity are all skewed to the left. In addition, the release_ year shows that most data is collected from this present time, meaning the most recent movies. The revenue and the budget that account for inflation over time maintained similar results to the actual budget and revenue."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f6e0ddb3898>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df[df.genres.isnull()].hist(figsize = (10,9));"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> Most of the examples with null values for genres had low popularity. Also, Most of these examples have very low revenue and low budget."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 9827 entries, 0 to 10865\n",
      "Data columns (total 10 columns):\n",
      "popularity              9827 non-null float64\n",
      "budget                  9827 non-null int64\n",
      "revenue                 9827 non-null int64\n",
      "genres                  9827 non-null object\n",
      "production_companies    9827 non-null object\n",
      "vote_count              9827 non-null int64\n",
      "vote_average            9827 non-null float64\n",
      "release_year            9827 non-null int64\n",
      "budget_adj              9827 non-null float64\n",
      "revenue_adj             9827 non-null float64\n",
      "dtypes: float64(4), int64(4), object(2)\n",
      "memory usage: 844.5+ KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>popularity</th>\n",
       "      <th>budget</th>\n",
       "      <th>revenue</th>\n",
       "      <th>genres</th>\n",
       "      <th>production_companies</th>\n",
       "      <th>vote_count</th>\n",
       "      <th>vote_average</th>\n",
       "      <th>release_year</th>\n",
       "      <th>budget_adj</th>\n",
       "      <th>revenue_adj</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>32.985763</td>\n",
       "      <td>150000000</td>\n",
       "      <td>1513528810</td>\n",
       "      <td>Action|Adventure|Science Fiction|Thriller</td>\n",
       "      <td>Universal Studios|Amblin Entertainment|Legenda...</td>\n",
       "      <td>5562</td>\n",
       "      <td>6.5</td>\n",
       "      <td>2015</td>\n",
       "      <td>1.379999e+08</td>\n",
       "      <td>1.392446e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>28.419936</td>\n",
       "      <td>150000000</td>\n",
       "      <td>378436354</td>\n",
       "      <td>Action|Adventure|Science Fiction|Thriller</td>\n",
       "      <td>Village Roadshow Pictures|Kennedy Miller Produ...</td>\n",
       "      <td>6185</td>\n",
       "      <td>7.1</td>\n",
       "      <td>2015</td>\n",
       "      <td>1.379999e+08</td>\n",
       "      <td>3.481613e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>13.112507</td>\n",
       "      <td>110000000</td>\n",
       "      <td>295238201</td>\n",
       "      <td>Adventure|Science Fiction|Thriller</td>\n",
       "      <td>Summit Entertainment|Mandeville Films|Red Wago...</td>\n",
       "      <td>2480</td>\n",
       "      <td>6.3</td>\n",
       "      <td>2015</td>\n",
       "      <td>1.012000e+08</td>\n",
       "      <td>2.716190e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11.173104</td>\n",
       "      <td>200000000</td>\n",
       "      <td>2068178225</td>\n",
       "      <td>Action|Adventure|Science Fiction|Fantasy</td>\n",
       "      <td>Lucasfilm|Truenorth Productions|Bad Robot</td>\n",
       "      <td>5292</td>\n",
       "      <td>7.5</td>\n",
       "      <td>2015</td>\n",
       "      <td>1.839999e+08</td>\n",
       "      <td>1.902723e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9.335014</td>\n",
       "      <td>190000000</td>\n",
       "      <td>1506249360</td>\n",
       "      <td>Action|Crime|Thriller</td>\n",
       "      <td>Universal Pictures|Original Film|Media Rights ...</td>\n",
       "      <td>2947</td>\n",
       "      <td>7.3</td>\n",
       "      <td>2015</td>\n",
       "      <td>1.747999e+08</td>\n",
       "      <td>1.385749e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>9.110700</td>\n",
       "      <td>135000000</td>\n",
       "      <td>532950503</td>\n",
       "      <td>Western|Drama|Adventure|Thriller</td>\n",
       "      <td>Regency Enterprises|Appian Way|CatchPlay|Anony...</td>\n",
       "      <td>3929</td>\n",
       "      <td>7.2</td>\n",
       "      <td>2015</td>\n",
       "      <td>1.241999e+08</td>\n",
       "      <td>4.903142e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>8.654359</td>\n",
       "      <td>155000000</td>\n",
       "      <td>440603537</td>\n",
       "      <td>Science Fiction|Action|Thriller|Adventure</td>\n",
       "      <td>Paramount Pictures|Skydance Productions</td>\n",
       "      <td>2598</td>\n",
       "      <td>5.8</td>\n",
       "      <td>2015</td>\n",
       "      <td>1.425999e+08</td>\n",
       "      <td>4.053551e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7.667400</td>\n",
       "      <td>108000000</td>\n",
       "      <td>595380321</td>\n",
       "      <td>Drama|Adventure|Science Fiction</td>\n",
       "      <td>Twentieth Century Fox Film Corporation|Scott F...</td>\n",
       "      <td>4572</td>\n",
       "      <td>7.6</td>\n",
       "      <td>2015</td>\n",
       "      <td>9.935996e+07</td>\n",
       "      <td>5.477497e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>7.404165</td>\n",
       "      <td>74000000</td>\n",
       "      <td>1156730962</td>\n",
       "      <td>Family|Animation|Adventure|Comedy</td>\n",
       "      <td>Universal Pictures|Illumination Entertainment</td>\n",
       "      <td>2893</td>\n",
       "      <td>6.5</td>\n",
       "      <td>2015</td>\n",
       "      <td>6.807997e+07</td>\n",
       "      <td>1.064192e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>6.326804</td>\n",
       "      <td>175000000</td>\n",
       "      <td>853708609</td>\n",
       "      <td>Comedy|Animation|Family</td>\n",
       "      <td>Walt Disney Pictures|Pixar Animation Studios|W...</td>\n",
       "      <td>3935</td>\n",
       "      <td>8.0</td>\n",
       "      <td>2015</td>\n",
       "      <td>1.609999e+08</td>\n",
       "      <td>7.854116e+08</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   popularity     budget     revenue  \\\n",
       "0   32.985763  150000000  1513528810   \n",
       "1   28.419936  150000000   378436354   \n",
       "2   13.112507  110000000   295238201   \n",
       "3   11.173104  200000000  2068178225   \n",
       "4    9.335014  190000000  1506249360   \n",
       "5    9.110700  135000000   532950503   \n",
       "6    8.654359  155000000   440603537   \n",
       "7    7.667400  108000000   595380321   \n",
       "8    7.404165   74000000  1156730962   \n",
       "9    6.326804  175000000   853708609   \n",
       "\n",
       "                                      genres  \\\n",
       "0  Action|Adventure|Science Fiction|Thriller   \n",
       "1  Action|Adventure|Science Fiction|Thriller   \n",
       "2         Adventure|Science Fiction|Thriller   \n",
       "3   Action|Adventure|Science Fiction|Fantasy   \n",
       "4                      Action|Crime|Thriller   \n",
       "5           Western|Drama|Adventure|Thriller   \n",
       "6  Science Fiction|Action|Thriller|Adventure   \n",
       "7            Drama|Adventure|Science Fiction   \n",
       "8          Family|Animation|Adventure|Comedy   \n",
       "9                    Comedy|Animation|Family   \n",
       "\n",
       "                                production_companies  vote_count  \\\n",
       "0  Universal Studios|Amblin Entertainment|Legenda...        5562   \n",
       "1  Village Roadshow Pictures|Kennedy Miller Produ...        6185   \n",
       "2  Summit Entertainment|Mandeville Films|Red Wago...        2480   \n",
       "3          Lucasfilm|Truenorth Productions|Bad Robot        5292   \n",
       "4  Universal Pictures|Original Film|Media Rights ...        2947   \n",
       "5  Regency Enterprises|Appian Way|CatchPlay|Anony...        3929   \n",
       "6            Paramount Pictures|Skydance Productions        2598   \n",
       "7  Twentieth Century Fox Film Corporation|Scott F...        4572   \n",
       "8      Universal Pictures|Illumination Entertainment        2893   \n",
       "9  Walt Disney Pictures|Pixar Animation Studios|W...        3935   \n",
       "\n",
       "   vote_average  release_year    budget_adj   revenue_adj  \n",
       "0           6.5          2015  1.379999e+08  1.392446e+09  \n",
       "1           7.1          2015  1.379999e+08  3.481613e+08  \n",
       "2           6.3          2015  1.012000e+08  2.716190e+08  \n",
       "3           7.5          2015  1.839999e+08  1.902723e+09  \n",
       "4           7.3          2015  1.747999e+08  1.385749e+09  \n",
       "5           7.2          2015  1.241999e+08  4.903142e+08  \n",
       "6           5.8          2015  1.425999e+08  4.053551e+08  \n",
       "7           7.6          2015  9.935996e+07  5.477497e+08  \n",
       "8           6.5          2015  6.807997e+07  1.064192e+09  \n",
       "9           8.0          2015  1.609999e+08  7.854116e+08  "
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dropna(inplace = True)\n",
    "# to show the changes \n",
    "df.info()\n",
    "df.describe()\n",
    "df.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> Dropping the examples with null values in 'genres' is mostly best since these examples have low budgets and low revenues. Also, these examples can't be filled with the mean since they're categorical."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='eda'></a>\n",
    "## Exploratory Data Analysis\n",
    "\n",
    "### Research Question 1: What kinds of properties are associated with movies that have high revenues?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.4568294687615524"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Use this, and more code cells, to explore your data. Don't forget to add\n",
    "#   Markdown cells to document your observations and findings.\n",
    "\n",
    "# considerably movie with high revenues are the one that are over 75% \n",
    "df_high_revenues = df.revenue >=2.413675e+07\n",
    "df_low_revenues = df.revenue < 2.413675e+07\n",
    "\n",
    "df.popularity[df_high_revenues].mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> The has been done to observe the properties of the high revenue examples. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f6e0e71a7f0>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.popularity[df_low_revenues].mean()\n",
    "\n",
    "df.popularity[df_high_revenues].hist( alpha = 0.5, label = 'high revenue')\n",
    "df.popularity[df_low_revenues].hist(alpha = 0.5, label = 'low revenue')\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ">  We can say that movies with higher popularity value have higher revenues. We can detect this from the mean value, and we can observe it from the plotting. The alpha value is 0.5 so that we can see where they overlap. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "45503516.7342\n",
      "4924843.93176\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f6e0dc22d30>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(df.budget[df_high_revenues].mean())\n",
    "print(df.budget[df_low_revenues].mean())\n",
    "\n",
    "df.budget[df_high_revenues].hist( alpha = 0.5, label = 'high revenue')\n",
    "df.budget[df_low_revenues].hist(alpha = 0.5, label = 'low revenue')\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> Here, we can see that the revenue increases as the budget increases. The mean values also vary where the mean of high revenues budget is higher than the mean of low revenues budget"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6.26025878004\n",
      "5.85682392586\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f6e0e8e1780>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(df.vote_average[df_high_revenues].mean())\n",
    "print(df.vote_average[df_low_revenues].mean())\n",
    "\n",
    "df.vote_average[df_high_revenues].hist( alpha = 0.5, label = 'high revenue')\n",
    "df.vote_average[df_low_revenues].hist(alpha = 0.5, label = 'low revenue')\n",
    "plt.legend();\n",
    "\n",
    "\n",
    "#df[df_high_revenues].groupby(['genres'])['revenue'].mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> From the previous observation, we can see that the budget and popularity value are high whenever the revenue is high, so these are considered to be the properties of the revenue. In addition, the vote average is on average higher with higher revenues, but they are not really far off. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Research Question 2: Which genres are most popular from year to year?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>release_year</th>\n",
       "      <th>genres</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1960</td>\n",
       "      <td>Horror</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1961</td>\n",
       "      <td>Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1962</td>\n",
       "      <td>Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1963</td>\n",
       "      <td>Horror</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1964</td>\n",
       "      <td>Comedy|Romance</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1965</td>\n",
       "      <td>Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1966</td>\n",
       "      <td>Action|Western</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1967</td>\n",
       "      <td>Comedy|Drama|Romance</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1968</td>\n",
       "      <td>Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1969</td>\n",
       "      <td>Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>1970</td>\n",
       "      <td>Horror</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>1971</td>\n",
       "      <td>Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>1972</td>\n",
       "      <td>Comedy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>1973</td>\n",
       "      <td>Horror</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>1974</td>\n",
       "      <td>Comedy|Science Fiction</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>1975</td>\n",
       "      <td>Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>1976</td>\n",
       "      <td>Horror|Thriller</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>1977</td>\n",
       "      <td>Horror|Science Fiction</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>1978</td>\n",
       "      <td>Horror</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>1979</td>\n",
       "      <td>Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>1980</td>\n",
       "      <td>Comedy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>1981</td>\n",
       "      <td>Comedy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>1982</td>\n",
       "      <td>Comedy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>1983</td>\n",
       "      <td>Comedy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>1984</td>\n",
       "      <td>Comedy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>1985</td>\n",
       "      <td>Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>1986</td>\n",
       "      <td>Comedy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>1987</td>\n",
       "      <td>Comedy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>1988</td>\n",
       "      <td>Horror|Thriller</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>1989</td>\n",
       "      <td>Comedy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>1990</td>\n",
       "      <td>Comedy|Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>1991</td>\n",
       "      <td>Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>1992</td>\n",
       "      <td>Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>1993</td>\n",
       "      <td>Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>1994</td>\n",
       "      <td>Comedy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>1995</td>\n",
       "      <td>Comedy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>1996</td>\n",
       "      <td>Comedy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>1997</td>\n",
       "      <td>Comedy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>1998</td>\n",
       "      <td>Comedy|Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>1999</td>\n",
       "      <td>Comedy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>2000</td>\n",
       "      <td>Comedy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>2001</td>\n",
       "      <td>Comedy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>2002</td>\n",
       "      <td>Comedy|Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>2003</td>\n",
       "      <td>Comedy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>2004</td>\n",
       "      <td>Comedy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>2005</td>\n",
       "      <td>Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>2006</td>\n",
       "      <td>Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>2007</td>\n",
       "      <td>Comedy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>2008</td>\n",
       "      <td>Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>2009</td>\n",
       "      <td>Comedy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>2010</td>\n",
       "      <td>Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>2011</td>\n",
       "      <td>Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>2012</td>\n",
       "      <td>Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>2013</td>\n",
       "      <td>Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>2014</td>\n",
       "      <td>Drama</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>2015</td>\n",
       "      <td>Drama</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    release_year                  genres\n",
       "0           1960                  Horror\n",
       "1           1961                   Drama\n",
       "2           1962                   Drama\n",
       "3           1963                  Horror\n",
       "4           1964          Comedy|Romance\n",
       "5           1965                   Drama\n",
       "6           1966          Action|Western\n",
       "7           1967    Comedy|Drama|Romance\n",
       "8           1968                   Drama\n",
       "9           1969                   Drama\n",
       "10          1970                  Horror\n",
       "11          1971                   Drama\n",
       "12          1972                  Comedy\n",
       "13          1973                  Horror\n",
       "14          1974  Comedy|Science Fiction\n",
       "15          1975                   Drama\n",
       "16          1976         Horror|Thriller\n",
       "17          1977  Horror|Science Fiction\n",
       "18          1978                  Horror\n",
       "19          1979                   Drama\n",
       "20          1980                  Comedy\n",
       "21          1981                  Comedy\n",
       "22          1982                  Comedy\n",
       "23          1983                  Comedy\n",
       "24          1984                  Comedy\n",
       "25          1985                   Drama\n",
       "26          1986                  Comedy\n",
       "27          1987                  Comedy\n",
       "28          1988         Horror|Thriller\n",
       "29          1989                  Comedy\n",
       "30          1990            Comedy|Drama\n",
       "31          1991                   Drama\n",
       "32          1992                   Drama\n",
       "33          1993                   Drama\n",
       "34          1994                  Comedy\n",
       "35          1995                  Comedy\n",
       "36          1996                  Comedy\n",
       "37          1997                  Comedy\n",
       "38          1998            Comedy|Drama\n",
       "39          1999                  Comedy\n",
       "40          2000                  Comedy\n",
       "41          2001                  Comedy\n",
       "42          2002            Comedy|Drama\n",
       "43          2003                  Comedy\n",
       "44          2004                  Comedy\n",
       "45          2005                   Drama\n",
       "46          2006                   Drama\n",
       "47          2007                  Comedy\n",
       "48          2008                   Drama\n",
       "49          2009                  Comedy\n",
       "50          2010                   Drama\n",
       "51          2011                   Drama\n",
       "52          2012                   Drama\n",
       "53          2013                   Drama\n",
       "54          2014                   Drama\n",
       "55          2015                   Drama"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "result = (df.groupby('release_year')['genres']\n",
    "                  .apply(lambda x: x.value_counts().index[0])\n",
    "                  .reset_index())\n",
    "result"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> From this statement, we first did the groupby for each year. Then, we chose the most common genre for each year. This was to comprehend the trend in the last recorded years."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 3: In the last ten years, what is the genre that has a high popularity?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Comedy                                             90\n",
       "Drama                                              82\n",
       "Drama|Romance                                      37\n",
       "Comedy|Romance                                     37\n",
       "Horror|Thriller                                    29\n",
       "Comedy|Drama|Romance                               24\n",
       "Comedy|Drama                                       22\n",
       "Thriller                                           18\n",
       "Animation|Family                                   18\n",
       "Action|Thriller                                    17\n",
       "Crime|Drama|Thriller                               17\n",
       "Drama|Thriller                                     16\n",
       "Animation|Comedy|Family                            14\n",
       "Drama|Comedy                                       14\n",
       "Horror                                             13\n",
       "Action|Crime|Thriller                              11\n",
       "Action|Thriller|Crime                              10\n",
       "Drama|Comedy|Romance                               10\n",
       "Action|Comedy                                      10\n",
       "Action                                             10\n",
       "Action|Thriller|Science Fiction                     9\n",
       "Romance|Comedy                                      9\n",
       "Adventure|Family|Fantasy                            8\n",
       "Comedy|Romance|Drama                                8\n",
       "Drama|Crime                                         8\n",
       "Action|Adventure|Science Fiction                    8\n",
       "Action|Adventure|Fantasy                            8\n",
       "Science Fiction|Action|Adventure                    8\n",
       "Comedy|Crime                                        8\n",
       "Drama|Horror|Thriller                               8\n",
       "                                                   ..\n",
       "Science Fiction|Mystery|Thriller                    1\n",
       "Animation|Drama                                     1\n",
       "Comedy|Adventure|Fantasy|Animation|Family           1\n",
       "Adventure|Comedy|Family|Fantasy                     1\n",
       "Science Fiction|Action|Adventure|Fantasy|Comedy     1\n",
       "Animation|Family|Adventure|Science Fiction          1\n",
       "Adventure|Fantasy|Romance                           1\n",
       "Comedy|Thriller                                     1\n",
       "Horror|Thriller|Comedy|Crime                        1\n",
       "Action|Comedy|Science Fiction|Fantasy               1\n",
       "Action|Drama|Mystery|Thriller                       1\n",
       "Crime|Action|Drama                                  1\n",
       "Drama|Thriller|Crime|Romance                        1\n",
       "Drama|Action|History|Thriller                       1\n",
       "Comedy|Action|Adventure                             1\n",
       "Thriller|Action|Adventure|Drama                     1\n",
       "Comedy|Family|Drama                                 1\n",
       "Thriller|Romance                                    1\n",
       "War|Drama|History|Action                            1\n",
       "Adventure|Comedy|Romance                            1\n",
       "Drama|Romance|Thriller                              1\n",
       "Adventure|Thriller|Science Fiction                  1\n",
       "Adventure|Horror                                    1\n",
       "Action|Adventure|Science Fiction|Fantasy            1\n",
       "Comedy|Drama|Family|Fantasy|Romance                 1\n",
       "Action|Science Fiction|Thriller|Western             1\n",
       "Action|Adventure|Drama|Mystery|Romance              1\n",
       "Mystery|Crime|Action|Thriller|Drama                 1\n",
       "Action|Mystery|Science Fiction|Thriller             1\n",
       "Comedy|Horror|Science Fiction                       1\n",
       "Name: genres, Length: 539, dtype: int64"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# the mask to choose only high revenue brought from the statistical summary\n",
    "high_pop = df.popularity >= 0.773583\n",
    "# to do the query\n",
    "df2 = df[high_pop]\n",
    "# query to get the last ten years \n",
    "df_last_ten_years = df2.query('release_year >= 2005')\n",
    "\n",
    "# to see the total count in the last 10 years \n",
    "df_last_ten_years.genres.value_counts()\n",
    "#df_last_ten_years.genres.value_counts().plot(kind = 'bar', figsize = (300,100))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> In the last ten years, the most common genre is comdey. The was to understand what the most focused on genre."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='conclusions'></a>\n",
    "## Conclusions\n",
    "\n",
    "> In conclusion, we can see that the revenue is positively correlated with the budget and popularity value. The vote_average also included some iformation that shows it was somehow positively correlated with the revenue but not very strongly. In addition, we can see that the genres comedy, horror, romance, and drama were very dominant along the years. Lastly, we can see that comedy along the last ten years has been also dominant. even though it was not in the top, it was still considerably dominant. This can help us make correct predictions for the next years. \n",
    "\n",
    "> Limitations such as null values didn't allow for extra understanding of the dataset. In addition, there were multiple overlapping values in genre, so it has caused us to exculde some examples when they might have been included. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#from subprocess import call\n",
    "from subprocess import call\n",
    "call(['python', '-m', 'nbconvert', 'Investigate_a_Dataset.ipynb'])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
